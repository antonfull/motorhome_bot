from aiogram import Bot
from aiogram.types import Message, CallbackQuery
from utils.database import Database
import os
from keyboards.profile_kb import data_kb, add_match, delete_match
from utils.function import list_gamer

async def viewn_game(message: Message, bot: Bot):
    await bot.send_message(message.from_user.id, f'–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É —Ç—É—Ä–∞', reply_markup=data_kb())

async def viewn_game_date(call: CallbackQuery):
    await call.answer()
    date = call.data.split("_")[-1]
    db = Database(os.getenv('DATABASE_NAME'))
    games = db.select_games('0', date)
    if(games):
        await call.message.answer(f'–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –∏–≥—Ä—ã:')
        for game in games:
            players = db.select_player(game[0])
            gamers = list_gamer(players)
            msg = (f'üß≠–¢—É—Ä —Å–æ—Å—Ç–æ–∏—Ç—Å—è: {game[9]} (‚õ∞ –ê–¥—Ä–µ—Å: {game[10]}) \n\n'
                   f'üïê{game[2]} –≤ {game[3]} \n\n'
                   f'üöê–ê–≤—Ç–æ–¥–æ–º: {game[4]} \n\n'
                   f'üë®üèª–ú–∞–∫—Å–∏–º—É–º –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤ - {game[5]}\n\n'
                   f'üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å: {game[6]} \n\n'
                   f'{gamers}')
            if not(db.check_user(game[0], call.from_user.id)):
                await call.message.answer(msg, reply_markup=add_match(game[0], call.from_user.id))
            else:
                await call.message.answer(msg, reply_markup=delete_match(game[0], call.from_user.id))

    else:
        await call.message.answer(f'–í –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É –Ω–µ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è —Ç—É—Ä–æ–≤')

async def add_match_player(call: CallbackQuery):
    db = Database(os.getenv('DATABASE_NAME'))
    game = db.select_game(0, call.data.split('_')[-2])
    if not (db.check_user(game[0], call.from_user.id)):
        db.add_user_match(game[0], call.from_user.id)
    players = db.select_player(game[0])
    gamers = list_gamer(players)
    msg = (f'üß≠–¢—É—Ä —Å–æ—Å—Ç–æ–∏—Ç—Å—è: {game[9]} (‚õ∞ –ê–¥—Ä–µ—Å: {game[10]}) \n\n'
           f'üïê{game[2]} –≤ {game[3]} \n\n'
           f'üöê–ê–≤—Ç–æ–¥–æ–º: {game[4]} \n\n'
           f'üë®üèª–ú–∞–∫—Å–∏–º—É–º –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤ - {game[5]}\n\n'
           f'üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å: {game[6]} \n\n'
           f'{gamers}')
    await  call.message.edit_text(msg, reply_markup=delete_match(game[0], call.from_user.id))

async def delete_match_player(call: CallbackQuery):
    db = Database(os.getenv('DATABASE_NAME'))
    game = db.select_game(0, call.data.split('_')[-2])
    if (db.check_user(game[0], call.from_user.id)):
        db.delete_user_match(game[0], call.from_user.id)
    players = db.select_player(game[0])
    gamers = list_gamer(players)
    msg = (f'üß≠–¢—É—Ä —Å–æ—Å—Ç–æ–∏—Ç—Å—è: {game[9]} (‚õ∞ –ê–¥—Ä–µ—Å: {game[10]}) \n\n'
           f'üïê{game[2]} –≤ {game[3]} \n\n'
           f'üöê–ê–≤—Ç–æ–¥–æ–º: {game[4]} \n\n'
           f'üë®üèª–ú–∞–∫—Å–∏–º—É–º –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤ - {game[5]}\n\n'
           f'üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å: {game[6]} \n\n'
           f'{gamers}')

    await call.message.edit_text(msg, reply_markup=add_match(game[0], call.from_user.id))
